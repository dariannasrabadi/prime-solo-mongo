Responses to be stored here:

- [x] Create a collection named orders.
db.createCollection('orders') ---> example answer.


var order = db.orders


- [x] Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
order.insert ({ orderDate: new Date('2017-02-03'), orderTotal: 5, lineItems: [{ productName: "nutella", quantity: 1, unitPrice: 5 } ]})
order.insert ({ orderDate: new Date('2017-04-04'), orderTotal: 14, lineItems: [{ productName: "redbaron", quantity: 1, unitPrice: 5 }, { productName: "3muskateers", quantity: 4, unitPrice: 2 } ]})
order.insert ({ orderDate: new Date('2017-01-02'), orderTotal: 2, lineItems: [{ productName: "gum", quantity: 2, unitPrice: 1 } ]})


- [x] Find all orders and make them look pretty.
order.find().pretty()


- [x] Find all orders with an orderDate that is after 1/31/2017.
order.find({orderDate: {$gt: new Date('2017-01-31')}}).pretty()


- [x] Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
order.update({ orderDate: new Date('2017-02-03')}, {$set: {orderTotal: 63 }})


- [x] Add another lineItem to the order from 4/4/2017
order.update({ orderDate: new Date('2017-04-04')}, {$push: {lineItems: {productName: "newThing", quantity: 50, unitPrice: 2} }})


- [x] Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
order.update({ orderDate: new Date('2017-01-02')}, {$set: {lineItems: [{productName: "transistor radio", quantity: 2, unitPrice: 38}] }})


- [x] Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $elemMatch
order.find({ lineItems: { $elemMatch: { quantity: {$gt: 2, $lt: 10}}}})
